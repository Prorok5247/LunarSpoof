buildscript {
    repositories {
        maven {
            name = "jitpack"
            url = "https://jitpack.io/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "com.github.asbyth:ForgeGradle:86b2392"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "2.0"
group = "co.uk.isxander"
archivesBaseName = "lunarspoof"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
}

repositories {
  mavenCentral()
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    provided files("libs/modcore.jar")
    provided files("libs/xanderlib.jar")

    embed group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.2'
}

jar {
    dependsOn configurations.compile
    from {
        configurations.embed.collect {
            it.isDirectory() ? it : zipTree(it)
        }
     }

    configurations.embed.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
        from(project.zipTree(dep)) {
            include 'META-INF/services', 'META-INF/services/**'
        }
    }
}

jar {
    archiveName = "[$minecraft.version-$version] LunarSpoof.jar"

    manifest {
        attributes "FMLCorePlugin": "co.uk.isxander.lunarspoof.forge.FMLLoadingPlugin",
                "ModSide": "CLIENT",
                "FMLCorePluginContainsFMLMod": "Yes, yes it does"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Forge does not import resources properly.
task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

tasks.moveResources.dependsOn processResources
tasks.classes.dependsOn moveResources
